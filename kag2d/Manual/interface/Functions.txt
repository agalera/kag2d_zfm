--- SCRIPT INTERFACE FOR BUILD 3570 ---
-- GLOBAL FUNCTIONS --

string ::formatInt(int64 val, const string&in options, uint width = 0)
string ::formatFloat(double val, const string&in options, uint width = 0, uint precision = 0)
int64 ::parseInt(const string&in, uint base = 10, uint&out byteCount = 0)
double ::parseFloat(const string&in, uint&out byteCount = 0)
string[]@ ::getCallStack()
string[]@ ::getScriptStack()
void ::printTrace()
string ::join(const string[]&in, const string&in)
string ::trim(const string&in)
bool Maths::isValid(float v)
float Maths::FastCos(float v)
float Maths::FastSin(float v)
float Maths::Sin(float v)
float Maths::Cos(float v)
float Maths::ASin(float v)
float Maths::ACos(float v)
float Maths::Tan(float v)
float Maths::ATan(float v)
float Maths::ATan2(float y, float x)
float Maths::FastSqrt(float v)
float Maths::Sqrt(float v)
float Maths::InvSqrt(float v)
float Maths::Floor(float v)
float Maths::Ceil(float v)
bool Maths::Equals(float a, float b)
float Maths::Min(float a, float b)
float Maths::Max(float a, float b)
float Maths::Clamp(float v, float min, float max)
float Maths::Clamp01(float v)
float Maths::Abs(float v)
int Maths::Abs(int v)
float Maths::Pow(float a, float n)
double Maths::Pow(double a, double n)
float Maths::Pow(float a, int n)
float Maths::Log(float a)
float Maths::FMod(float a, float around)
float Maths::Roundf(float a)
int Maths::Round(float a)
uint8 Maths::get256DegreesFrom360(float degrees)
float Maths::get360DegreesFrom256(uint8 degrees)
float Maths::SmoothStep(float x)
float Maths::Lerp(float start, float end, float time)
int ::XORRandom(int max)
Vec2f ::Vec2f_lengthdir(float length, float dir)
Vec2f ::Vec2f_lengthdir_deg(float length, float dir)
Vec2f ::Vec2f_lengthdir_rad(float length, float dir)
Vec2f ::Vec2f_lerp(Vec2f start, Vec2f end, float time)
float ::getDistanceToLine(Vec2f a, Vec2f b, Vec2f p)
float ::getDistanceToLine(Vec2f a, Vec2f b, Vec2f p, Vec2f&out pointOnLine)
bool GUI::LoadSkin(const string&in)
bool GUI::LoadSkin(const string&in, const string&in)
void GUI::DrawPane(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawPane(Vec2f upperleft, Vec2f lowerright, SColor color)
void GUI::DrawSunkenPane(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawWindow(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawFramedPane(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawButton(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawButtonPressed(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawButtonHover(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawRectangle(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawRectangle(Vec2f upperleft, Vec2f lowerright, SColor color)
void GUI::DrawProgressBar(Vec2f upperleft, Vec2f lowerright, float percent)
void GUI::DrawBubble(Vec2f upperleft, Vec2f lowerright)
void GUI::DrawLine(Vec2f a, Vec2f b, SColor color)
void GUI::DrawArrow(Vec2f a, Vec2f b, SColor color)
void GUI::DrawSpline(Vec2f a, Vec2f b, Vec2f h1, Vec2f h2, int steps, SColor color)
void GUI::DrawSplineArrow(Vec2f a, Vec2f b, SColor color)
void GUI::DrawLine2D(Vec2f a, Vec2f b, SColor color)
void GUI::DrawArrow2D(Vec2f a, Vec2f b, SColor color)
void GUI::DrawSpline2D(Vec2f a, Vec2f b, Vec2f h1, Vec2f h2, int steps, SColor color)
void GUI::DrawSplineArrow2D(Vec2f a, Vec2f b, SColor color)
void GUI::DrawCircle(Vec2f pos, float b, SColor color)
void GUI::DrawIconByName(const string&in iconName, Vec2f pos)
void GUI::DrawIconByName(const string&in iconName, Vec2f pos, float scale)
void GUI::DrawIconByName(const string&in iconName, Vec2f pos, float scaleX, float scaleY, int team_num, SColor color)
bool GUI::hasIconName(const string&in iconName)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos, float scale, int team_num)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos, float scale, SColor color)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos, float scaleX, float scaleY, SColor color)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos, float scaleX, float scaleY, int team_num, SColor color)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos, float scale)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f frameDimension, Vec2f pos)
void GUI::DrawIcon(const string&in textureFilename, int iconFrame, Vec2f pos, float scale)
void GUI::DrawIcon(const string&in textureFilename, Vec2f pos)
void GUI::DrawIcon(const string&in textureFilename, Vec2f pos, float scale)
void GUI::DrawIconDirect(const string&in textureFilename, Vec2f pos, Vec2f framePos, Vec2f frameDimension)
void GUI::DrawIconDirect(const string&in textureFilename, Vec2f pos, Vec2f framePos, Vec2f frameDimension, float scale, int team_num, SColor color)
void GUI::DrawText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter, bool drawBackgroundPane)
void GUI::DrawText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter)
void GUI::DrawText(const string&in text, Vec2f pos, SColor color)
void GUI::DrawTextCentered(const string&in text, Vec2f pos, SColor color)
void GUI::DrawTranslatedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter, bool drawBackgroundPane)
void GUI::DrawTranslatedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter)
void GUI::DrawTranslatedText(const string&in text, Vec2f pos, SColor color)
void GUI::DrawTranslatedTextCentered(const string&in text, Vec2f pos, SColor color)
void GUI::DrawShadowedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter, bool drawBackgroundPane)
void GUI::DrawShadowedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter)
void GUI::DrawShadowedText(const string&in text, Vec2f pos, SColor color)
void GUI::DrawShadowedTextCentered(const string&in text, Vec2f pos, SColor color)
void GUI::DrawShadowedTranslatedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter, bool drawBackgroundPane)
void GUI::DrawShadowedTranslatedText(const string&in text, Vec2f upperleft, Vec2f lowerright, SColor color, bool HorCenter, bool VerCenter)
void GUI::DrawShadowedTranslatedText(const string&in text, Vec2f pos, SColor color)
void GUI::DrawShadowedTranslatedTextCentered(const string&in text, Vec2f pos, SColor color)
void GUI::GetTextDimensions(const string&in text, Vec2f&out dim)
void GUI::GetIconDimensions(const string&in iconName, Vec2f&out dim)
void GUI::GetImageDimensions(const string&in fileName, Vec2f&out dim)
void GUI::SetFont(const string&in name)
void ::print(const string&in)
void ::print(const string&in, const SColor&in)
void ::printf(const string&in)
void ::error(const string&in)
void ::warn(const string&in)
void ::warning(const string&in)
void ::debug(const string&in)
void ::tcpr(const string&in)
void ::printInt(const string&in, int i)
void ::printFloat(const string&in, float f)
void ::printString(const string&in, const string&in)
void ::printVec2f(const string&in, Vec2f v)
void ::printBool(const string&in, bool b)
void ::rebuild()
uint ::getFontHeight()
uint ::getScreenHeight()
uint ::getScreenWidth()
bool ::isPlayerListShowing()
void ::drawRulesFont(string text, SColor colour, Vec2f topleft, Vec2f bottomright, bool halign, bool valign)
void ::setHelpText(string text)
void ::SetupHighLevelMapChunkSize(int chunks)
void ::RegisterFileExtensionScript(const string&in scriptFilename, const string&in extension)
CGridMenu@ ::CreateGridMenu(Vec2f pos2d, CBlob@ blob, Vec2f slots, const string&in)
CGridMenu@ ::getGridMenuByName(const string&in name)
void ::SetGridMenusSize(const float size, const float scale, const int captionheight)
void ::AddIconToken(const string&in, const string&in, Vec2f frameDimension, int frame, int teamColor)
void ::AddIconToken(const string&in, const string&in, Vec2f frameDimension, int frame, SColor color)
void ::AddIconToken(const string&in, const string&in, Vec2f frameDimension, int frame)
void ::AddColorToken(const string&in, SColor color)
string ::getIconTokenFilename(const string&in token)
CPlayer@ ::getPlayerByUsername(string name)
CPlayer@ ::getPlayerByNetworkId(uint16 netid)
CPlayer@ ::getLocalPlayer()
CBlob@ ::getLocalPlayerBlob()
CPlayer@ ::getLocalPlayer(uint index)
CBlob@ ::getLocalPlayerBlob(uint index)
int ::getPlayersCount()
void ::KickPlayer(CPlayer@ player)
void ::BanPlayer(CPlayer@ player, int time_seconds)
bool ::getRespawnBlobs(CBlob@[]@ list, int team)
CBlob@ ::server_CreateBlob(const string&in, int team, Vec2f Position)
CBlob@ ::server_CreateBlob(const string&in)
CBlob@ ::server_CreateBlobNoInit(const string&in)
CBlob@ ::getBlobByNetworkID(uint16 netid)
bool ::getBlobs(CBlob@[]@ list)
CBlob@ ::getBlobByName(const string&in name)
bool ::getBlobsByName(string name, CBlob@[]@ list)
bool ::getBlobsByTag(string tag, CBlob@[]@ list)
void ::SetupCustomEmitEffect(string name, string scriptfile, string scriptfunction, uint8 hard_freq, uint8 chance_freq, uint16 timeout)
uint8 ::GetCustomEmitEffectID(string name)
bool ::CustomEmitEffectExists(string name)
void ::MakeCoin(Vec2f pos, Vec2f vel, int style)
CParticle@ ::ParticleAnimated(string filename, Vec2f pos, Vec2f vel, float angle, float scale, uint8 animatespeed, float gravity, bool selflit)
CParticle@ ::ParticleAnimated(string filename, Vec2f pos, Vec2f vel, float angle, float scale, int style, int frame, Vec2f framesize, uint8 animatespeed, float gravity, bool selflit)
CParticle@ ::makeGibParticle(string filename, Vec2f pos, Vec2f vel, int style, int frame, Vec2f framesize, float gravity, int emiteffect, string soundfilename, int team)
CParticle@ ::makeGibParticle(string filename, Vec2f pos, Vec2f vel, int style, int frame, Vec2f framesize, float gravity, int emiteffect, string soundfilename)
CParticle@ ::ParticlePixel(Vec2f pos, Vec2f vel, SColor color, bool selflit)
CParticle@ ::ParticlePixel(Vec2f pos, Vec2f vel, SColor color, bool selflit, int timeout)
CParticle@ ::ParticleBlood(Vec2f pos, Vec2f vel, SColor color)
CParticle@ ::ParticleSpark(Vec2f pos, Vec2f vel, SColor color)
CParticle@ ::ParticleBloodSplat(Vec2f pos, bool larger)
CParticle@ ::ParticleZombieLightning(Vec2f pos)
CParticle@ ::ParticlePixelUnlimited(Vec2f pos, Vec2f vel, SColor color, bool selflit)
CParticle@ ::ParticleRaw()
CParticle@ ::ParticleRawOnScreen(Vec2f pos)
CParticle@ ::ParticleTexturedAnimated(string texture_name, Vec2f pos, Vec2f vel, float angle, float scale, uint8 animatespeed, float gravity, bool selflit)
CParticle@ ::ParticleTexturedGibs(string texture_name, Vec2f pos, Vec2f vel, int style, int frame, string soundcollide, float mass, int emiteffect, Vec2f framesize)
CParticle@ ::ParticleWood(const string&in textureFilename, Vec2f pos, Vec2f vel)
void ::ParticlesFromSprite(CSpriteLayer@ sprite, Vec2f pos, Vec2f vel, int velRandomization, int probability)
void ::ParticlesFromSprite(CSpriteLayer@ sprite)
void ::ParticlesFromSprite(CSprite@ sprite, Vec2f pos, Vec2f vel, int velRandomization, int probability)
void ::ParticlesFromSprite(CSprite@ sprite)
Vec2f ::getRandomVelocity(float angleDegrees, float magnitude, float angleVariation)
void ::Particle_SetCollideSound(CParticle@ p, const string&in filename)
float ::getInterpolationFactor()
float ::getRenderDeltaTime()
float ::getRenderExactDeltaTime()
float ::getRenderSmoothDeltaTime()
float ::getRenderApproximateCorrectionFactor()
void ::setGameState(State state)
State ::getGameState()
void ::SetChatVisible(bool v)
bool ::IsChatVisible()
bool ::IsChatPromptActive()
void ::SetChatLayout(Vec2f topleft, Vec2f bottomright)
void ::ResetChatLayout()
void GUI::LoadFont(const string&in name, const string&in filename, uint size, bool antialias)
void GUI::LoadFont(const string&in name, const string&in filename, uint size)
bool GUI::isFontLoaded(const string&in name)
void Sound::Play(const string&in)
void Sound::Play(const string&in, Vec2f position)
void Sound::Play(const string&in, Vec2f position, float volume)
void Sound::Play(const string&in, Vec2f position, float volume, float pitch)
void Sound::Play2D(const string&in, float volume, float pan)
void Sound::SetScale(float scale)
void Sound::SetCutOff(float distance)
bool Sound::isTooFar(Vec2f position)
void Sound::ResetListenerPositionOverride()
void Sound::SetListenerPosition(Vec2f pos)
string ::getFileVariation(const string&in, int lowRange, int hiRange)
CMixer@ ::getMixer()
CContextMenu@ Menu::getMainMenu()
void Menu::CloseAllMenus()
CContextMenu@ Menu::addContextMenu(CContextMenu@ parent, const string&in label)
void Menu::addContextItem(CContextMenu@ menu, const string&in label, const string&in filename, const string&in functionsig)
void Menu::addContextItemWithParams(CContextMenu@ menu, const string&in label, const string&in filename, const string&in functionsig, CBitStream@ params)
void Menu::addSeparator(CContextMenu@ menu)
void Menu::addInfoBox(CContextMenu@ menu, const string&in label, const string&in info)
bool ::isServer()
bool ::isClient()
int ::getChatChannel()
void ::LoadSeclevs(const string&in filename)
void ::LoadSeclevs()
CMap@ ::getMap()
CRules@ ::getRules()
CHUD@ ::getHUD()
CNet@ ::getNet()
CSecurity@ ::getSecurity()
CCamera@ ::getCamera()
CControls@ ::getControls()
CControls@ ::getControls(uint index)
int ::getLocalPlayersCount()
int ::getJoysticksCount()
Driver@ ::getDriver()
void ::LoadRules(const string&in filename)
void ::LateLoadRules(const string&in filename)
CMap@ ::LoadMap(const string&in filename)
bool ::LoadNextMap()
bool ::LoadMapCycle(const string&in filename)
int ::getPlayerCount()
int ::getPlayerIndex(CPlayer@ player)
CPlayer@ ::getPlayer(int i)
CPlayer@ ::AddBot(const string&in name)
CPlayer@ ::AddBot(const string&in name, const uint8 team, const uint8 classNum)
void ::ShakeScreen(int mag, int time, Vec2f pos)
void ::ShakeScreen2(int mag, int time, Vec2f pos)
void ::ShakeScreen(Vec2f vector, int time, Vec2f pos)
void ::SetScreenFlash(uint8 basealpha, uint8 red, uint8 green, uint8 blue, float flashtime = 0.75f)
int ::getScreenFlashAlpha()
bool ::registerScriptedCommand(const string&in name, const string&in functionsig, const string&in filename, const string&in usage)
bool ::registerScriptedCommand(const string&in name, const string&in functionsig, const string&in filename)
void ::client_AddToChat(const string&in line, SColor color)
void ::client_AddToChat(const string&in line)
void ::client_SendChat(const string&in line, int chat_channel)
void ::MessageBox(const string&in line, bool blocking)
void ::MessageBox(const string&in caption, const string&in line, bool blocking)
uint ::getTicksASecond()
void ::server_DropCoins(Vec2f pos, int amount)
string ::getMapInParenthesis()
void ::ExitToMenu()
void ::QuitGame()
string ::getFilePath(const string&in filename)
string ::getFilenameWithoutExtension(const string&in filename)
string ::getFilenameWithoutPath(const string&in filename)
int ::Time_Local()
int ::Time()
int ::Time_MonthDate()
int ::Time_Month()
int ::Time_YearDate()
int ::Time_Year()
int ::Time_MonthDate(int time_in)
int ::Time_Month(int time_in)
int ::Time_YearDate(int time_in)
int ::Time_Year(int time_in)
int ::Time_DaysSince(int time)
uint ::getGameTime()
void ::AddMod(const string&in modname)
void Engine::ShowLoginWindow()
bool Engine::isAuthenticated()
bool Engine::isLoginWindow()
bool Engine::usesSteam()
bool Engine::hasStandardGUIFocus()
bool Engine::isWindows()
string ::getTranslatedString(const string&in toBeTranslated)
void ::CopyToClipboard(const string&in str)
string ::getFromClipboard()
void ::OpenWebsite(const string&in str)
void ::EngineMessage(const string&in str)
bool ::isTestBuild()
bool ::isFreeBuild()
uint ::getFreeBuildEndTime()
void ::ResetFirstGameLaunch()
bool ::isFirstGameLaunch()
void ::SetTeamChatColor(SColor color)
bool ::isWindowActive()
bool ::isWindowFocused()
bool ::isFullscreen()
string ::getCurrentScriptName()
void ::AddPathSuccessor(Vec2f tilepos)
CScriptedBrowser@ ::getBrowser()
void ::PrincessSaved(bool alive)
bool Texture::systemEnabled()
bool Texture::createFromFile(const string&in name, const string&in filename)
bool Texture::createBySize(const string&in name, int w, int h)
bool Texture::createFromData(const string&in name, const ImageData&in data)
bool Texture::createFromCopy(const string&in name, const string&in othername)
bool Texture::destroy(const string&in name)
bool Texture::exists(const string&in name)
int Texture::width(const string&in name)
int Texture::height(const string&in name)
ImageData@ Texture::data(const string&in name)
ImageData@ Texture::dataFromSprite(CSprite@ s)
ImageData@ Texture::dataFromSpriteLayer(CSpriteLayer@ s)
bool Texture::update(const string&in name, const ImageData&in data)
void Render::Triangles(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv)
void Render::TrianglesIndexed(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv, const uint16[]&in index)
void Render::TrianglesColored(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv, const SColor[]&in rgb)
void Render::TrianglesColoredIndexed(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv, const SColor[]&in rgb, const uint16[]&in index)
void Render::Quads(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv)
void Render::QuadsColored(const string&in texture, float z, const Vec2f[]&in pos, const Vec2f[]&in uv, const SColor[]&in rgb)
void Render::RawTriangles(const string&in texture, const Vertex[]&in verts)
void Render::RawTrianglesIndexed(const string&in texture, const Vertex[]&in verts, const uint16[]&in index)
void Render::RawQuads(const string&in texture, const Vertex[]&in verts)
void Render::SetZBuffer(bool ZRead, bool ZWrite)
void Render::SetAlphaBlend(bool blend_enabled)
void Render::ClearZ()
void Render::SetTransform(const float[]&in model, const float[]&in view, const float[]&in projection)
void Render::SetModelTransform(const float[]&in mat)
void Render::SetViewTransform(const float[]&in mat)
void Render::SetProjectionTransform(const float[]&in mat)
void Render::SetTransformWorldspace()
void Render::SetTransformScreenspace()
void Render::SetBackfaceCull(bool cull)
int Render::addScript(ScriptLayer layer, const string&in scriptname, const string&in scriptfunction, float z)
int Render::addBlobScript(ScriptLayer layer, CBlob@ blob, const string&in scriptname, const string&in scriptfunction)
void Render::RemoveScript(int script_callback_id)
void Render::SetFog(SColor color, FogType fogType, float start, float end, float density, bool pixelFog, bool rangeFog)
void Render::SetAmbientLight(SColor color)
void Matrix::Multiply(const float[]&in a, const float[]&in b, float[]&inout into)
void Matrix::MultiplyImmediate(const float[]&inout a, const float[]&in b)
void Matrix::SetScale(const float[]&inout a, float x, float y, float z)
void Matrix::SetTranslation(const float[]&inout a, float x, float y, float z)
void Matrix::SetRotationRadians(const float[]&inout a, float x, float y, float z)
void Matrix::SetRotationDegrees(const float[]&inout a, float x, float y, float z)
void Matrix::MakeIdentity(const float[]&inout a)
void Matrix::MakeOrtho(const float[]&inout a, float w, float h, float d)
void Matrix::MakePerspective(const float[]&inout a, float fov_rad, float aspect, float znear, float zfar)
HeadsPack@ ::getHeadsPackByIndex(int index)
HeadsPack@ ::getHeadsPackByName(string name)
bool ::isHeadsPackAllowed(int index)
int ::getHeadsPackCount()
